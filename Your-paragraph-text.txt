Integration:                                    %backward Interpolation                      %forward Interpolation                       %Runge-Kutta 4th-order
x = input('Enter xi values: ');                 x = input('Enter xi values as an array: '); x = input('Enter xi values as an array: ');   syms x
y = input('Enter yi values: ');                 y = input('Enter yi values as an array: '); y = input('Enter yi values as an array: ');   syms y
h = x(2)-x(1);                                  X = input('Enter X value: ');                X = input('Enter X value: ');                f(x, y) = input("Enter f(x,y): ");
n = length(x);                                  h = x(2) - x(1);                             h = x(2) - x(1);                             y1 = input("Enter y1 value: ");
if mod(n-1,2) == 0                              n = length(x);                               n = length(x);                               x1 = input("Enter x1 value: ");
 disp("Using Simpson's 1/3rd rule");            D = zeros(n);                                D = zeros(n);                                h = input("Enter Step Size: ");
 I = y(1)+y(n);                                 for i = 1:n                                  for i = 1:n                                  X = input("Enter X value: ");
 for i = 2:2:n-1                                 D(i,1) = y(i);                               D(i,1) = y(i);                              n = (X - x1)/h;
 I = I+4*y(i);                                  end                                          end                                          x = x1:h:X;
 end                                            for j = 2:n                                  for j = 2:n                                  y = zeros(1, n+1);
 for i = 3:2:n-2                                 for i = n:-1:j                               for i = 1:(n - j + 1)                       y(1) = y1;
 I =I+2*y(i);                                    D(i,j) = D(i,j-1) - D(i-1,j-1);              D(i,j) = D(i + 1, j - 1) - D(i, j - 1);     for i = 2:(n+1)
 end                                             end                                          end                                          k1 = h * f(x(i-1), y(i-1));
 I = (h/3)*I;                                   end                                          end                                           k2 = h * f(x(i-1) + h/2, y(i-1) + k1/2);
else                                            Y = y(n);                                    Y = y(1);                                     k3 = h * f(x(i-1) + h/2, y(i-1) + k2/2);
 disp("Using Trapezoidal rule");                product = 1;                                 product = 1;                                  k4 = h * f(x(i-1) + h, y(i-1) + k3);
 I = 0;                                         fact = 1;                                    fact = 1;                                     y(i) = y(i-1) + (k1 + 2*k2 + 2*k3 + k4) / 6;
 for i = 2:(n-1)                                for i = 1:(n - 1)                            for i = 1:(n - 1)                            end
 I = I+y(i);                                     product = product * (X - x(n - i + 1)) / h; product = product * (X - x(i)) / h;          disp(y(n+1));
 end                                             fact = fact * (1 / i);                       fact = fact * (1 / i);
                                                                                                                                                                                    %lagrange interpolation
 I = I*2+y(1)+y(n);                              Y = Y + (product * fact * D(n, i + 1));      Y = Y + (product * fact * D(1, i + 1));
                                                                                                                                                                                    x = input('Enter x values : ');
 I = (h/2)*I;                                   end                                          end                                            %Euler's Method                         y = input('Enter y values : ');
end                                             fprintf('Interpolated value Y = %f\n', Y); fprintf('Interpolated value Y = %f\n', Y);       syms x                                  X = input('Enter the y value to interpolate: ');
disp(["The integral result is: ", num2str(I)]);                                                                                             syms y                                  n = length(x);
Curve Fitting                                                                                                                               f(x,y) = input("Enter f(x,y)")          Y = 0;
A = [-6 -4 -2 0 2 4 6]                                                                                                                      y1 = input("Enter y1 value")            for i = 1:n;
B = [-0.2 0.8 -1.6 3.5 3.1 4.9 3.9]                                                                                                         x1 = input("Enter x1 value")             L=1;
P = polyfit(A,B,6)                                                                                                                          h = input("Enter Step Size")             for j = 1:n;
plot(A,B,'k')                                                                                                                               X = input("Enter X value")               if i~=j
hold on                                                                                                                                     n = (X - x1)/h                           L = L*(X - x(j)) / (x(i) - x(j));
A = min(A):2:max(A)                                                                                                                         x = x1:h:X                               end
B = polyval(P,A)                                                                                                                            y = zeros(1, n+1)                        end
plot(A,B,'r')                                                                                                                               y(1) = y1                                Y = Y + L * y(i);
hold off                                                                                                                                    for i = 2 : (n+1)                       end
                                                                                                                                             y(i) = y(i-1) + h * f(x(i-1),y(i-1))   disp(['Interpolated value is: ', num2str(Y)]);
                                                                                                                                            end
                                                                                                                                            disp(y(n+1))
